<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LogoFX.Client.Mvvm.Commanding</name>
    </assembly>
    <members>
        <member name="T:LogoFX.Client.Mvvm.Commanding.CommandEventArgs">
            <summary>
            Represents event arguments with passed command parameter.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:LogoFX.Client.Mvvm.Commanding.CommandEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:LogoFX.Client.Mvvm.Commanding.CommandEventArgs"/> class.
            </summary>
            <param name="commandParameter">The command parameter.</param>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Commanding.CommandEventArgs.CommandParameter">
            <summary>
            Gets the command parameter.
            </summary>
            <value>
            The command parameter.
            </value>
        </member>
        <member name="T:LogoFX.Client.Mvvm.Commanding.Guard">
            <summary>
            Contains static guard clauses
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Commanding.Guard.ArgumentNotNull``1(``0,System.String)">
            <summary>
            Asserts the argument is not null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Commanding.Guard.ArgumentNotNull``1(``0,System.String,System.String)">
            <summary>
            Asserts the argument is not null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Commanding.Guard.ArgumentNotNull``1(``0,System.String,System.String,System.Object[])">
            <summary>
            Asserts the argument is not null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="messageFormat">The message format.</param>
            <param name="messageArgs">The message arguments.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Commanding.Guard.ArgumentNotDefault``1(``0,System.String)">
            <summary>
            Asserts the argument does not have default value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Commanding.Guard.ArgumentNotDefault``1(``0,System.String,System.String)">
            <summary>
            Asserts the argument does not have default value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Commanding.Guard.ArgumentNotDefault``1(``0,System.String,System.String,System.Object[])">
            <summary>
            Asserts the argument does not have default value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="messageFormat">The message format.</param>
            <param name="messageArgs">The message arguments.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Commanding.Guard.ArgumentNotNullOrEmpty(System.String,System.String)">
            <summary>
            Asserts the argument is neither null nor empty.
            </summary>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Commanding.Guard.ArgumentNotNullOrEmpty(System.String,System.String,System.String)">
            <summary>
            Asserts the argument is neither null nor empty.
            </summary>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Commanding.Guard.ArgumentNotNullOrEmpty(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts the argument is neither null nor empty.
            </summary>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="messageFormat">The message format.</param>
            <param name="messageArgs">The message arguments.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Commanding.Guard.ArgumentNotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Asserts the argument is neither null nor whitespace.
            </summary>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Commanding.Guard.ArgumentNotNullOrWhiteSpace(System.String,System.String,System.String)">
            <summary>
            Asserts the argument is neither null nor whitespace.
            </summary>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Commanding.Guard.ArgumentNotNullOrWhiteSpace(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts the argument is neither null nor whitespace.
            </summary>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="messageFormat">The message format.</param>
            <param name="messageArgs">The message arguments.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Commanding.Guard.ArgumentOutOfRange(System.Boolean,System.String)">
            <summary>
            Asserts the argument is not out of range.
            </summary>
            <param name="outOfRange">if set to <c>true</c> [out of range].</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Commanding.Guard.ArgumentOutOfRange(System.Boolean,System.String,System.String)">
            <summary>
            Asserts the argument is not out of range.
            </summary>
            <param name="outOfRange">if set to <c>true</c> [out of range].</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Commanding.Guard.ArgumentOutOfRange(System.Boolean,System.String,System.String,System.Object[])">
            <summary>
            Asserts the argument is not out of range.
            </summary>
            <param name="outOfRange">if set to <c>true</c> [out of range].</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="messageFormat">The message format.</param>
            <param name="messageArgs">The message arguments.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Commanding.Guard.ArgumentIsType(System.Object,System.Type,System.String)">
            <summary>
            Asserts the argument is from the given type.
            </summary>
            <param name="argument">The argument.</param>
            <param name="type">The type.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Commanding.Guard.ArgumentIsType(System.Object,System.Type,System.String,System.String)">
            <summary>
            Asserts the argument is from the given type.
            </summary>
            <param name="argument">The argument.</param>
            <param name="type">The type.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Commanding.Guard.ArgumentIsType(System.Object,System.Type,System.String,System.String,System.Object[])">
            <summary>
            Asserts the argument is from the given type.
            </summary>
            <param name="argument">The argument.</param>
            <param name="type">The type.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="messageFormat">The message format.</param>
            <param name="messageArgs">The message arguments.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Commanding.Guard.ArgumentValue(System.Boolean,System.String)">
            <summary>
            Throws exception for the given parameter.
            </summary>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Commanding.Guard.ArgumentValue(System.Boolean,System.String,System.String)">
            <summary>
            Throws exception for the given parameter.
            </summary>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Commanding.Guard.ArgumentValue(System.Boolean,System.String,System.String,System.Object[])">
            <summary>
            Throws exception for the given parameter.
            </summary>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="messageFormat">The message format.</param>
            <param name="messageArgs">The message arguments.</param>
        </member>
        <member name="T:LogoFX.Client.Mvvm.Commanding.IActionCommand">
            <summary>
            Represents a command that supports various requery options 
            and is able to receive events on property and collection notifications.
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Commanding.IActionCommand.IsActive">
            <summary>
            Gets or sets a value indicating whether this instance is active.
            </summary>
            <value>
              <c>true</c> if this instance is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Commanding.IActionCommand.RequeryCanExecute">
            <summary>
            Re-evaluates the can execute value.
            </summary>
        </member>
        <member name="T:LogoFX.Client.Mvvm.Commanding.ICommandCondition`2">
            <summary>
            Represents command with parameter after it has been setup with execution condition.
            </summary>
            <typeparam name="TParameter">Type of command parameter.</typeparam>
            <typeparam name="TCommand">Type of command.</typeparam>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Commanding.ICommandCondition`2.Do(System.Action{`0})">
            <summary>
            Associates the specified action with the command execution.
            </summary>
            <param name="execute">The action to execute.</param>
            <returns></returns>
        </member>
        <member name="T:LogoFX.Client.Mvvm.Commanding.ICommandCondition`1">
            <summary>
            Represents command after it has been setup with execution condition.
            </summary>
            <typeparam name="TCommand">Type of command.</typeparam>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Commanding.ICommandCondition`1.Do(System.Action)">
            <summary>
            Associates the specified action with the command execution.
            </summary>
            <param name="execute">The action to execute.</param>
            <returns></returns>
        </member>
        <member name="T:LogoFX.Client.Mvvm.Commanding.IExtendedCommand">
            <summary>
            Extended command with additional attributes.
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Commanding.IExtendedCommand.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Commanding.IExtendedCommand.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Commanding.IExtendedCommand.ImageUri">
            <summary>
            Gets the image URI.
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Commanding.IExtendedCommand.IsAdvanced">
            <summary>
            Gets a value indicating whether this instance is advanced.
            </summary>
            <value>
            	<c>true</c> if this instance is advanced; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:LogoFX.Client.Mvvm.Commanding.IReceiveEvent">
            <summary>
            Represents an object that is able to receive weak events.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Commanding.IReceiveEvent.ReceiveWeakEvent(System.EventArgs)">
            <summary>
            Receives the weak event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="T:LogoFX.Client.Mvvm.Commanding.IReverseCommand">
            <summary>
            Represents an <see cref="T:System.Windows.Input.ICommand">ICommand</see> whose execution can be handled in the View.
            </summary>
        </member>
        <member name="E:LogoFX.Client.Mvvm.Commanding.IReverseCommand.CommandExecuted">
            <summary>
            Occurs when the <see cref="T:System.Windows.Input.ICommand">ICommand</see> is executed.
            </summary>
        </member>
        <member name="T:LogoFX.Client.Mvvm.Commanding.TypeExtensions">
            <summary>
            Adds functionality to <see cref="T:System.Type"/> reflection.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Commanding.TypeExtensions.IsInstanceOfType(System.Type,System.Object)">
            <summary>
            Determines whether the specified object is an instance of the provided type.
            </summary>
            <param name="type">The type.</param>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Commanding.TypeExtensions.IsAssignableFrom(System.Type,System.Type)">
            <summary>
            Determines whether one type is assignable from another.
            </summary>
            <param name="type">The type.</param>
            <param name="t">The t.</param>
            <returns></returns>
        </member>
    </members>
</doc>
