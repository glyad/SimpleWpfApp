<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LogoFX.Client.Mvvm.Model</name>
    </assembly>
    <members>
        <member name="T:LogoFX.Client.Mvvm.Model.ClientModel">
            <summary>
            Represents client model
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.ClientModel.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:LogoFX.Client.Mvvm.Model.ClientModel"/> class
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.ClientModel.Item(System.String)">
            <summary>
            Gets the error with the specified column name.
            </summary>
            <value>
            The error.
            </value>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.ClientModel.Error">
            <summary>
            Gets the error.
            </summary>
            <value>
            The error.
            </value>
        </member>
        <member name="T:LogoFX.Client.Mvvm.Model.ValueObject">
            <summary>
            Represents a value object
            </summary>
        </member>
        <member name="T:LogoFX.Client.Mvvm.Model.EntityId`1">
            <summary>
            Represents entity ID
            </summary>
            <typeparam name="TEntityId">The type of the entity identifier.</typeparam>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.EntityId`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:LogoFX.Client.Mvvm.Model.EntityId`1"/> class.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.EntityId`1.Id">
            <summary>
            Gets or sets the entity identifier
            </summary>
        </member>
        <member name="T:LogoFX.Client.Mvvm.Model.CompoundMemento`1">
            <summary>
            A class used to group multiple mementos together, which can be pushed on to the undo stack as a single memento. 
            With this class, multiple consecutive actions can be recognized as a single action, which are undo as an entity. 
            It also implements the <see cref="T:Solid.Patterns.Memento.IMemento`1"/> interface, which means one <see cref="T:LogoFX.Client.Mvvm.Model.CompoundMemento`1"/> can be a 
            member of another <see cref="T:LogoFX.Client.Mvvm.Model.CompoundMemento`1"/>. Therefore it is possible to create hierachical mementos. 
            </summary>
            <seealso cref="T:Solid.Patterns.Memento.IMemento`1"/>    
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.CompoundMemento`1.Add(Solid.Patterns.Memento.IMemento{`0})">
            <summary>
            Adds memento to this complex memento. Note that the order of adding mementos is critical.
            </summary>
            <param name="m"></param>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.CompoundMemento`1.Size">
            <summary>
            Gets number of sub-memento contained in this complex memento.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.CompoundMemento`1.Restore(`0)">
            <summary>
            Implicit implememntation of <see cref="M:Solid.Patterns.Memento.IMemento`1.Restore(`0)"/>, which returns <see cref="T:LogoFX.Client.Mvvm.Model.CompoundMemento`1"/>
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.CompoundMemento`1.Solid#Patterns#Memento#IMemento{T}#Restore(`0)">
            <summary>
            Explicit implememntation of <see cref="M:Solid.Patterns.Memento.IMemento`1.Restore(`0)"/>
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:LogoFX.Client.Mvvm.Model.ConcurrentModelsCollection`1">
            <summary>
            Thread-safe models collection
            </summary>
            <typeparam name="TItem">Type of model</typeparam>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.ConcurrentModelsCollection`1.ItemsCount">
            <summary>
            Gets the items count.
            </summary>
            <value>
            The items count.
            </value>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.ConcurrentModelsCollection`1.HasItems">
            <summary>
            Gets a value indicating whether this instance has items.
            </summary>
            <value>
              <c>true</c> if this instance has items; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.ConcurrentModelsCollection`1.Add(`0)">
            <summary>
            Adds item to the end of the collection and raises notification.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.ConcurrentModelsCollection`1.Remove(`0)">
            <summary>
            Removes the specified item from the collection and raises notification.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.ConcurrentModelsCollection`1.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Clears the collection and updates its contents with the specified items; notification is raised in the end of the update operation.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.ConcurrentModelsCollection`1.Clear">
            <summary>
            Clears the collection and raises the notification in the end.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.ConcurrentModelsCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds collection of items as bulk operation; notification is raised in the end of the add operation.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.ConcurrentModelsCollection`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the collection of items as bulk operation; notification is raised in the end of the remove operation.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="T:LogoFX.Client.Mvvm.Model.EditableModel`1">
            <summary>
            Represents editable model.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.EditableModel`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LogoFX.Client.Mvvm.Model.EditableModel`1"/> class.
            </summary>
        </member>
        <member name="T:LogoFX.Client.Mvvm.Model.EditableModel`1.IInnerChangesSubscriber">
            <summary>
            Represents an API for subscribing and unsubscribing to inner property notifications
            </summary>
        </member>
        <member name="T:LogoFX.Client.Mvvm.Model.EditableModel`1.PropertyChangedInnerChangesSubscriber">
            <summary>
            An implementation of inner changes subscriber which is based on explicit INPC subscription
            This implementation does NOT use Weak Delegates internally due to the 
            fact that such an implementation fails to work and it is therefore necessary
            to explicitly unsubscribe from the notifications - potential source of leaks
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.EditableModel`1.IsDirty">
            <summary>
            Returns the Dirty state of the Model
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.EditableModel`1.CanCancelChanges">
            <summary>
            Returns the value that denotes whether the model's changes can be cancelled
            Setting this value explicitly to false will disable changes cancellation
            independently of the Dirty state of the Model
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.EditableModel`1.OwnDirty">
            <summary>
            This state is used to store the information about the Model's own Dirty state
            The overall Dirty state is influenced by this value as well as by the singular and collections Dirty states
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.EditableModel`1.CancelChanges">
            <summary>
            Cancels the current changes in the model
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.EditableModel`1.MakeDirty">
            <summary>
            Marks the Model as Dirty and stores its copy for possible restore
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.EditableModel`1.ClearDirty(System.Boolean)">
            <summary>
            Clears the Dirty state of the Model
            </summary>
            <param name="forceClearChildren">true, if the children's state should be cleared, false otherwise</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.EditableModel`1.NotifyCollectionChangedOnCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            The internal Dirty Source Collections might change from time to time
            In order to keep track of Dirty state changes in their items
            we must listen to the INCC events and subscribe/unsubscribe accordingly
            </summary>
            <param name="sender"></param>
            <param name="notifyCollectionChangedEventArgs"></param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.EditableModel`1.NotifyOnInnerChange(System.Object)">
            <summary>
            Subscribes to the Dirty state changes of the potential Dirty Source 
            </summary>
            <param name="notifyingObject"></param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.EditableModel`1.UnNotifyOnInnerChange(System.Object)">
            <summary>
            Unsubscribes from the Dirty state changes of the potential Dirty Source 
            </summary>
            <param name="notifyingObject"></param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.EditableModel`1.CommitChanges">
            <summary>
            Commits the changes and cleans up the dirty (being edited) object state.
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.EditableModel`1.CanCommitChanges">
            <summary>
            Gets a value indicating whether the model changes can be committed.
            </summary>
            <value>
            <c>true</c> if the model changes can be committed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.EditableModel`1.OnBeginEdit">
            <summary>
            Override this method to inject custom logic after the editing operation starts.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.EditableModel`1.OnEndEdit">
            <summary>
            Override this method to inject custom logic after the editing operation completes.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.EditableModel`1.OnCancelEdit">
            <summary>
            Override this method to inject custom logic after the editing operation is cancelled.
            </summary>
        </member>
        <member name="T:LogoFX.Client.Mvvm.Model.EditableModel`1.WithUndoRedo">
            <summary>
            This class represents an editable model which supports undo and redo operations.
            </summary>   
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.EditableModel`1.WithUndoRedo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LogoFX.Client.Mvvm.Model.EditableModel`1.WithUndoRedo"/> class.
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.EditableModel`1.WithUndoRedo.CanUndo">
            <summary>
            Gets the value indicating whether there are operations that can be undone.
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.EditableModel`1.WithUndoRedo.CanRedo">
            <summary>
            Gets the value indicating whether there are operations that can be redone.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.EditableModel`1.WithUndoRedo.Undo">
            <summary>
            Undoes the last operation.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.EditableModel`1.WithUndoRedo.Redo">
            <summary>
            Redoes the last operation.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.EditableModel`1.WithUndoRedo.MakeDirty">
            <summary>
            Marks the model as dirty.
            </summary>
        </member>
        <member name="T:LogoFX.Client.Mvvm.Model.EditableModel">
            <summary>
            Represents editable model with <see cref="T:System.Int32"/> as identifier.
            </summary>
        </member>
        <member name="T:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1">
            <summary>
            This class represents an undo and redo history.
            </summary>        
            <seealso cref="T:Solid.Patterns.Memento.IMemento`1"/>    
        </member>
        <member name="F:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.Subject">
            <summary>
            The subject that this undo redo history is about.
            </summary>
        </member>
        <member name="F:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.UndoStack">
            <summary>
            Undo stack
            </summary>
        </member>
        <member name="F:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.RedoStack">
            <summary>
            Redo stack
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.#ctor(`0)">
            <summary>
            Creates <see cref="T:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1"/>.
            </summary>
            <param name="subject">Undo-redo operations subject</param>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.InUndoRedo">
            <summary>
            Gets a value indicating if the history is in the process of undoing or redoing.
            </summary>
            <remarks>
            This property is extremely useful to prevent undesired "Do" being executed. 
            That could occur in the following scenario:
            event X causees a Do action and certain Undo / Redo action causes event X, 
            i.e. Undo / Redo causes a Do action, which will render history in a incorrect state.
            So whenever <see cref="M:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.Do(Solid.Patterns.Memento.IMemento{`0})"/> is called, the status of <see cref="P:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.InUndoRedo"/> 
            should aways be checked first. Example:
            <code>
            void SomeEventHandler() 
            {
                if(!history.InUndoRedo) 
                    history.Do(...);
            }
            </code>
            </remarks>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.UndoCount">
            <summary>
            Gets number of undo actions available
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.RedoCount">
            <summary>
            Gets number of redo actions available
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.SupportRedo">
            <summary>
            Gets or sets whether the history supports redo.
            </summary>
        </member>
        <member name="E:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.UndoStackChanged">
            <summary>
            Raise in case of change in the undo stack contents
            </summary>
        </member>
        <member name="E:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.RedoStackChanged">
            <summary>
            Raise in case of change in the redo stack contents
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.BeginCompoundDo">
            <summary>
            Begins a complex memento for grouping.
            </summary>
            <remarks>
            From the time this method is called till the time 
            <see cref="M:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.EndCompoundDo"/> is called, all the <i>DO</i> actions (by calling 
            <see cref="M:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.Do(Solid.Patterns.Memento.IMemento{`0})"/>) are added into a temporary 
            <see cref="T:LogoFX.Client.Mvvm.Model.CompoundMemento`1"/> and this memnto will be pushed into the undo 
            stack when <see cref="M:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.EndCompoundDo"/> is called. 
            <br/>
            If this method is called, it's programmer's responsibility to call <see cref="M:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.EndCompoundDo"/>, 
            or else this history will be in incorrect state and stop functioning.
            <br/>
            Sample Code:
            <br/>
            <code>
            // Version 1: Without grouping
            UndoRedoHistory&lt;Foo&gt; history = new UndoRedoHistory&lt;Foo&gt;();
            history.Clear();
            history.Do(memento1);
            history.Do(memento2);
            history.Do(memento3);
            // history has 3 actions on its undo stack.
            
            // Version 1: With grouping
            history.BeginCompoundDo(); // starting grouping
            history.Do(memento1);
            history.Do(memento2);
            history.Do(memento3);
            hisotry.EndCompoundDo(); // must be called to finish grouping
            // history has only 1 action on its undo stack instead 3. 
            // This single undo action will undo all actions memorized by memento 1 to 3.
            </code>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if previous grouping wasn't ended. See <see cref="M:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.EndCompoundDo"/>.
            </exception>
            <seealso cref="M:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.EndCompoundDo"/>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.EndCompoundDo">
            <summary>
            Ends grouping by pushing the complext memento created by <see cref="M:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.BeginCompoundDo"/> into the undo stack.
            </summary>
            <remarks>
            For details on how <i>grouping</i> works, see <see cref="M:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.BeginCompoundDo"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if grouping wasn't started. See <see cref="M:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.BeginCompoundDo"/>.
            </exception>/// <seealso cref="M:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.BeginCompoundDo"/>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.Do(Solid.Patterns.Memento.IMemento{`0})">
            <summary>
            Pushes an memento into the undo stack, any time the state of <see cref="F:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.Subject"/> changes. 
            </summary>
            <param name="m"></param>
            <remarks>
            This method MUST be properly involked by programmers right before (preferably) or right after 
            the state of <see cref="F:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.Subject"/> is changed. 
            Whenever <see cref="M:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.Do(Solid.Patterns.Memento.IMemento{`0})"/> is called, the status of <see cref="P:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.InUndoRedo"/> 
            should aways be checked first. See details at <see cref="P:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.InUndoRedo"/>. 
            This method causes redo stack to be cleared.
            </remarks>
            <seealso cref="P:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.InUndoRedo"/>
            <seealso cref="M:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.Undo"/>
            <seealso cref="M:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.Redo"/>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1._Do(Solid.Patterns.Memento.IMemento{`0})">
            <summary>
            Internal <b>DO</b> action with no error checking
            </summary>
            <param name="memento"></param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.Undo">
            <summary>
            Restores the subject to the previous state on the undo stack, and stores the state before undoing to redo stack.
            Method <see cref="P:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.CanUndo"/> can be called before calling this method.
            </summary>
            <seealso cref="M:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.Redo"/>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.Redo">
            <summary>
            Restores the subject to the next state on the redo stack, and stores the state before redoing to undo stack. 
            Method <see cref="P:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.CanRedo"/> can be called before calling this method.
            </summary>
            <seealso cref="M:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.Undo"/>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.CanUndo">
            <summary>
            Checks if there are any stored state available on the undo stack.
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.CanRedo">
            <summary>
            Checks if there are any stored state available on the redo stack.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.Clear">
            <summary>
            Clear the entire undo and redo stacks.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.PeekUndo">
            <summary>
            Gets, without removing, the top operation on the undo stack.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.UndoRedoHistory`1.PeekRedo">
            <summary>
            Gets, without removing, the top operation on the redo stack.
            </summary>
            <returns></returns>
        </member>
        <member name="T:LogoFX.Client.Mvvm.Model.EditableSingleAttribute">
            <summary>
            Determines whether a singular property should be cloned during snapshot creation
            </summary>
        </member>
        <member name="T:LogoFX.Client.Mvvm.Model.ErrorService">
            <summary>
            Helper for calculating validation errors
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.ErrorService.GetValidationErrorByPropertyName(System.Type,System.String,System.Object)">
            <summary>
            Gets validation errors description by property name
            </summary>
            <param name="type">Type of validated object</param>
            <param name="propertyName">Property name</param>
            <param name="propertyContainer">Validated object</param>
            <returns>Textual representation of errors, if any; empty string otherwise</returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.ErrorService.GetValidationErrorsByPropertyName(System.Type,System.String,System.Object)">
            <summary>
            Gets validation errors collection by property name
            </summary>
            <param name="type">Type of validated object</param>
            <param name="propertyName">Property name</param>
            <param name="propertyContainer">Validated object</param>
            <returns>Collection of validation errors</returns>
        </member>
        <member name="T:LogoFX.Client.Mvvm.Model.Extensions">
            <summary>
            Contains additional methods for easier manipulation on collections of models.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.Extensions.Merge``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Func{``1,``0},System.Func{``0,``1,System.Boolean})">
            <summary>
            Clones the source contents into the destination's , 
            while notifying to the gui on all the diffs between the source and the destination
            </summary>
            <remarks>Generalized version - most constraints reduced to serve maximum usecases</remarks>
            <typeparam name="T">Destination type</typeparam>
            <typeparam name="TW">source type</typeparam>
            <param name="destination">The destination list</param>
            <param name="source">The source list</param>
            <param name="creator">Factory method to produce T based on TW</param>
            <param name="comparator">Predicate to compare instances of T and TW</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.Extensions.AddIfMissing``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Adds if missing.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.Extensions.AddIfMissing``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Adds if missing.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="getValueFunc">The get value function.</param>
        </member>
        <member name="T:LogoFX.Client.Mvvm.Model.Model`1">
            <summary>
            Represents model for domain use
            </summary>
            <typeparam name="T">Type of model identifier</typeparam>
        </member>
        <member name="T:LogoFX.Client.Mvvm.Model.Model`1.PropertyData">
            <summary>
            Metadata info class
            </summary>
            <remarks>used for generic object display</remarks>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.Model`1.PropertyData.#ctor(LogoFX.Client.Mvvm.Model.Model{`0},System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:LogoFX.Client.Mvvm.Model.Model`1.PropertyData"/> class.
            </summary>
            <param name="o">The o.</param>
            <param name="prop">The prop.</param>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.Model`1.PropertyData.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.Model`1.PropertyData.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.Model`1.PropertyData.HaveDescription">
            <summary>
            Gets a value indicating whether property have description.
            </summary>
            <value>
              <c>true</c> if have description; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.Model`1.PropertyData.Description">
            <summary>
            Property description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.Model`1.PropertyData.DisplayName">
            <summary>
            Display name.
            </summary>
        </member>
        <member name="F:LogoFX.Client.Mvvm.Model.Model`1.Type">
            <summary>
            Returns current object type.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.Model`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LogoFX.Client.Mvvm.Model.Model`1"/> class.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.Model`1.#ctor(LogoFX.Client.Mvvm.Model.Contracts.IModel{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LogoFX.Client.Mvvm.Model.Model`1"/> class from other instance.
            </summary>
            <param name="other">The other model</param>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.Model`1.Id">
            <summary>
            Model identifier
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.Model`1.OnIdChangedOverride(`0,`0)">
            <summary>
            Override this method to inject custom logic during id set operation.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.Model`1.Name">
            <summary>
            Model name
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.Model`1.OnNameChangedOverride(System.String,System.String)">
            <summary>
            Override this method to inject custom logic during name set operation..
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.Model`1.Description">
            <summary>
            Model description
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.Model`1.OnDescriptionChangedOverride(System.String,System.String)">
            <summary>
            Override this method to inject custom logic during name set operation..
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.Model`1.Properties">
            <summary>
            Gets the list of properties associated with the current type.
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.Model`1.IsReadOnly">
            <summary>
            IsReadOnly property
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.Model`1.OnIsReadOnlyChangedOverride(System.Boolean,System.Boolean)">
            <summary>
            Override this method to inject custom logic during read only set operation..
            </summary>
            <param name="newValue">if set to <c>true</c> [new value].</param>
            <param name="oldValue">if set to <c>true</c> [old value].</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.Model`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.Model`1.Item(System.String)">
            <summary>
            Gets the error for the specified property.
            </summary>
            <value>
            The <see cref="T:System.String"/>.
            </value>
            <param name="columnName">Property name.</param>
            <returns></returns>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.Model`1.Error">
            <summary>
            Gets the error.
            </summary>
            <value>
            The error.
            </value>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.Model`1.GetErrors(System.String)">
            <summary>
            Gets the errors for the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.Model`1.HasErrors">
            <summary>
            Gets a value indicating whether this instance has errors.
            </summary>
            <value>
            <c>true</c> if this instance has errors; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.Model`1.RaiseErrorsChanged(System.String)">
            <summary>
            Fires ErrorsChanged event from the INotifyDataErrorInfo interface
            </summary>
            <param name="name"></param>
        </member>
        <member name="E:LogoFX.Client.Mvvm.Model.Model`1.ErrorsChanged">
            <summary>
            Raised when the collection of errors is changed.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.Model`1.SetError(System.String,System.String)">
            <summary>
            Sets external error to the specific property
            </summary>
            <param name="error">External error</param>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.Model`1.ClearError(System.String)">
            <summary>
            Clears external error from the specific property
            </summary>
            <param name="propertyName">Property name</param>
        </member>
        <member name="T:LogoFX.Client.Mvvm.Model.Model">
            <summary>
            Represents model with <see cref="T:System.Int32"/> as identifier.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.Model.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LogoFX.Client.Mvvm.Model.Model"/> class
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.Model.#ctor(LogoFX.Client.Mvvm.Model.Model)">
            <summary>
            Initializes a new instance of the <see cref="T:LogoFX.Client.Mvvm.Model.Model"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="T:LogoFX.Client.Mvvm.Model.ModelsCollection`1">
            <summary>
            Represents collection of models, supporting collection change notifications
            </summary>
            <typeparam name="TItem">Type of model</typeparam>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.ModelsCollection`1.ItemsCount">
            <summary>
            Gets the items count.
            </summary>
            <value>
            The items count.
            </value>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.ModelsCollection`1.HasItems">
            <summary>
            Gets a value indicating whether this instance has items.
            </summary>
            <value>
              <c>true</c> if this instance has items; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.ModelsCollection`1.Add(`0)">
            <summary>
            Adds item to the end of the collection and raises notification.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.ModelsCollection`1.Remove(`0)">
            <summary>
            Removes the specified item from the collection and raises notification.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.ModelsCollection`1.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Clears the collection and updates its contents with the specified items; notification is raised in the end of the update operation.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.ModelsCollection`1.Clear">
            <summary>
            Clears the collection and raises the notification in the end.
            </summary>
        </member>
        <member name="T:LogoFX.Client.Mvvm.Model.ModelsCollectionBase">
            <summary>
            Base class for collection of models, supporting collection change notifications
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.ModelsCollectionBase.ItemsCount">
            <summary>
            Gets the items count.
            </summary>
            <value>
            The items count.
            </value>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.ModelsCollectionBase.HasItems">
            <summary>
            Gets a value indicating whether this instance has items.
            </summary>
            <value>
              <c>true</c> if this instance has items; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:LogoFX.Client.Mvvm.Model.ModelsCollectionBase.HasItemsChanged">
            <summary>
            Raised when items collection is changed. 
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.ModelsCollectionBase.SafeRaiseHasItemsChanged">
            <summary>
            Raises the items collection change event
            </summary>
        </member>
        <member name="T:LogoFX.Client.Mvvm.Model.ObjectModel">
            <summary>
            Represents model that wraps foreign object
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.ObjectModel.#ctor(LogoFX.Client.Mvvm.Model.ObjectModel)">
            <summary>
            Initializes a new instance of the <see cref="T:LogoFX.Client.Mvvm.Model.ObjectModel"/> class.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.ObjectModel.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:LogoFX.Client.Mvvm.Model.ObjectModel"/> class.
            </summary>
            <param name="param"></param>
        </member>
        <member name="T:LogoFX.Client.Mvvm.Model.ObjectModel`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.ObjectModel`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LogoFX.Client.Mvvm.Model.ObjectModel`1"/> class.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.ObjectModel`1.#ctor(LogoFX.Client.Mvvm.Model.ObjectModel{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LogoFX.Client.Mvvm.Model.ObjectModel`1"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.ObjectModel`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:LogoFX.Client.Mvvm.Model.ObjectModel`1"/> class.
            </summary>
            <param name="param">The parameter.</param>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.ObjectModel`1.Object">
            <summary>
            Gets or sets the object.
            </summary>
            <value>
            The object.
            </value>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.ObjectModel`1.OnObjectChangedOverride(`0,`0)">
            <summary>
            Override this method to inject custom logic during object set operation.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.ObjectModel`1.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>
            The parent.
            </value>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.ObjectModel`1.OnParentChangedOverride(LogoFX.Client.Mvvm.Model.Contracts.IModel,LogoFX.Client.Mvvm.Model.Contracts.IModel)">
            <summary>
            Override this method to inject custom logic during parent set operation.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.ObjectModel`1.Save">
            <summary>
            Saves this instance.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.ObjectModel`1.OnSaveOverride">
            <summary>
            Override this to inject custom logic during save operation.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.ObjectModel`1.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:LogoFX.Client.Mvvm.Model.RangeModelsCollection`1">
            <summary>
            Represents collection of models, supporting collection change notifications. 
            Supports bulk operations efficiently.
            </summary>
            <typeparam name="TItem">Type of model</typeparam>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.RangeModelsCollection`1.ItemsCount">
            <summary>
            Gets the items count.
            </summary>
            <value>
            The items count.
            </value>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.RangeModelsCollection`1.HasItems">
            <summary>
            Gets a value indicating whether this instance has items.
            </summary>
            <value>
              <c>true</c> if this instance has items; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.RangeModelsCollection`1.Add(`0)">
            <summary>
            Adds item to the end of the collection and raises notification.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.RangeModelsCollection`1.Remove(`0)">
            <summary>
            Removes the specified item from the collection and raises notification.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.RangeModelsCollection`1.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Clears the collection and updates its contents with the specified items; notification is raised in the end of the update operation.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.RangeModelsCollection`1.Clear">
            <summary>
            Clears the collection and raises the notification in the end.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.RangeModelsCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds collection of items as bulk operation; notification is raised in the end of the add operation.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.RangeModelsCollection`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the collection of items as bulk operation; notification is raised in the end of the remove operation.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="T:LogoFX.Client.Mvvm.Model.RoundStack`1">
            <summary>
            Stack with capacity, bottom items beyond the capacity are discarded.
            </summary>
            <typeparam name="T"></typeparam>    
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.RoundStack`1.IsFull">
            <summary>
            Returns true if the <see cref="T:LogoFX.Client.Mvvm.Model.RoundStack`1"/> is full; otherwise, returns false.
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.RoundStack`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:LogoFX.Client.Mvvm.Model.RoundStack`1"/>.
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.RoundStack`1.Capacity">
            <summary>
            Gets the capacity of the <see cref="T:LogoFX.Client.Mvvm.Model.RoundStack`1"/>.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.RoundStack`1.#ctor(System.Int32)">
            <summary>
            Creates <see cref="T:LogoFX.Client.Mvvm.Model.RoundStack`1"/> with given capacity
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.RoundStack`1.Pop">
            <summary>
            Removes and returns the object at the top of the <see cref="T:LogoFX.Client.Mvvm.Model.RoundStack`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.RoundStack`1.Push(`0)">
            <summary>
            Inserts an object at the top of the <see cref="T:LogoFX.Client.Mvvm.Model.RoundStack`1"/>.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.RoundStack`1.Peek">
            <summary>
            Returns the object at the top of the <see cref="T:LogoFX.Client.Mvvm.Model.RoundStack`1"/> without removing it.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.RoundStack`1.Clear">
            <summary>
            Removes all the objects from the <see cref="T:LogoFX.Client.Mvvm.Model.RoundStack`1"/>.
            </summary>
        </member>
        <member name="T:LogoFX.Client.Mvvm.Model.StackWithNotifications`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.StackWithNotifications`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:LogoFX.Client.Mvvm.Model.StackWithNotifications`1"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="E:LogoFX.Client.Mvvm.Model.StackWithNotifications`1.StackChanged">
            <summary>
            Occurs when stack contents are changed.
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.Model.StackWithNotifications`1.Count">
            <summary>
            Gets the number of items.
            </summary>
            <value>
            The number of items.
            </value>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.StackWithNotifications`1.Push(`0)">
            <summary>
            Pushes the specified item on top of the stack.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.StackWithNotifications`1.Pop">
            <summary>
            Pops an item from the top of the stack.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.StackWithNotifications`1.Peek">
            <summary>
            Returns an item from the top of the stack without removing it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.StackWithNotifications`1.Clear">
            <summary>
            Clears the contents of the stack.
            </summary>
        </member>
        <member name="T:LogoFX.Client.Mvvm.Model.TypeInformationProvider">
            <summary>
            Type information storage, used to improve performance
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.TypeInformationProvider.GetCanCancelChangesSourceValuesUnboxed(System.Type,System.Object)">
            <summary>
            Retrieves collection of dirty sources from the given property container
            </summary>
            <param name="type">Type of property container</param>
            <param name="propertyContainer">Property container</param>
            <returns>Collection of <see cref="T:LogoFX.Client.Mvvm.Model.Contracts.ICanCancelChanges"/> sources</returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.TypeInformationProvider.GetCanCancelChangesSourceCollectionsUnboxed(System.Type,System.Object)">
            <summary>
            Retrieves dirty source collections' values from the given property container in the format of flat list
            </summary>
            <param name="type">Type of property container</param>
            <param name="propertyContainer">Property container</param>
            <returns>Dirty source values that originate in dirty source collections</returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.TypeInformationProvider.IsPropertyDirtySource(System.Type,System.String)">
            <summary>
            Determines whether property is a dirty source
            </summary>
            <param name="type">Type of property container</param>
            <param name="propertyName">Property name</param>
            <returns>True if property is a dirty source, false otherwise</returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.TypeInformationProvider.GetDirtySourceValue(System.Type,System.String,System.Object)">
            <summary>
            Retrieves property value for dirty source properties
            </summary>
            <param name="type">Type of property container</param>
            <param name="propertyName">Property name</param>
            <param name="propertyContainer">Property container</param>
            <returns>Property value if found, null otherwise</returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.TypeInformationProvider.GetDirtySourceValuesUnboxed(System.Type,System.Object)">
            <summary>
            Retrieves collection of dirty sources from the given property container
            </summary>
            <param name="type">Type of property container</param>
            <param name="propertyContainer">Property container</param>
            <returns>Collection of dirty sources</returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.TypeInformationProvider.GetPropertyDirtySourceCollections(System.Type,System.Object)">
            <summary>
            Retrieves collection of dirty source collections from the given property container
            </summary>
            <param name="type">Type of property container</param>
            <param name="properyContainer">Property container</param>
            <returns>Collection of dirty source collections</returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.TypeInformationProvider.GetDirtySourceCollectionsUnboxed(System.Type,System.Object)">
            <summary>
            Retrieves dirty source collections' values from the given property container in the format of flat list
            </summary>
            <param name="type">Type of property container</param>
            <param name="propertyContainer">Property container</param>
            <returns>Dirty source values that originate in dirty source collections</returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.TypeInformationProvider.IsPropertyNotifyDataErrorInfoSource(System.Type,System.String)">
            <summary>
            Determines whether property is an error source
            </summary>
            <param name="type">Type of property container</param>
            <param name="propertyName">Property name</param>
            <returns>True if property is an error source, false otherwise</returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.TypeInformationProvider.GetNotifyDataErrorInfoSourceValue(System.Type,System.String,System.Object)">
            <summary>
            Retrieves property value for error source properties
            </summary>
            <param name="type">Type of property container</param>
            <param name="propertyName">Property name</param>
            <param name="propertyContainer">Property container</param>
            <returns>Property value if found, null otherwise</returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.TypeInformationProvider.GetNotifyDataErrorInfoSourceValuesUnboxed(System.Type,System.Object)">
            <summary>
            Retrieves collection of error sources from the given property container
            </summary>
            <param name="type">Type of property container</param>
            <param name="propertyContainer">Property container</param>
            <returns>Collection of error sources</returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.TypeInformationProvider.GetStorableProperties(System.Type)">
            <summary>
            Retrieves collection of storable properties for the given type
            </summary>
            <param name="type">Type of property container</param>
            <returns>Collection of storable properties</returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.TypeInformationProvider.GetValidationInfo(System.Type,System.String)">
            <summary>
            Retrieves collection of validation attributes for the given property
            </summary>
            <param name="type">Type of property container</param>
            <param name="propertyName">Property name</param>
            <returns>Collection of validation attributes</returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.TypeInformationProvider.GetValidationInfoValue(System.Type,System.String,System.Object)">
            <summary>
            Returns validation information for the given property name
            </summary>
            <param name="type">Type of property container</param>
            <param name="propertyName">Property name</param>
            <param name="propertyContainer">Property container</param>
            <returns>Validation information if any is found, null otherwise</returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.Model.TypeInformationProvider.GetValidationInfoCollection(System.Type)">
            <summary>
            Retrieves collection of validation information for the given property container
            </summary>
            <param name="type">Type of property container</param>
            <returns>Collection of validation information</returns>
        </member>
    </members>
</doc>
