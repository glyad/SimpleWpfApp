<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LogoFX.Client.Mvvm.View</name>
    </assembly>
    <members>
        <member name="T:LogoFX.Client.Mvvm.View.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
             and this method is used to notify that some property value changed.
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example>
             <code>
             public class Foo : INotifyPropertyChanged
             {
               public event PropertyChangedEventHandler PropertyChanged;
            
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName)
               {}
            
               private string _name;
               public string Name
               {
                 get { return _name; }
                 set
                 {
                   _name = value;
                   NotifyChanged("LastName"); // Warning
                 }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() => Property)</c></item>
             <item><c>NotifyChanged((VM x) => x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Annotations.NotifyPropertyChangedInvocatorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LogoFX.Client.Mvvm.View.Annotations.NotifyPropertyChangedInvocatorAttribute"/> class.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Annotations.NotifyPropertyChangedInvocatorAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LogoFX.Client.Mvvm.View.Annotations.NotifyPropertyChangedInvocatorAttribute"/> class.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Annotations.NotifyPropertyChangedInvocatorAttribute.ParameterName">
            <summary>
            Gets the name of the parameter.
            </summary>
            <value>
            The name of the parameter.
            </value>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted. <br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same) for method output means that the methos doesn't return normally. <br/>
            <c>canbenull</c> annotation is only applicable for output parameters. <br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row, or use single attribute with rows separated by semicolon. <br/>
            </syntax>
            <examples>
            <list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // Regular Assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // String.IsNullOrEmpty
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list>
            </examples>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LogoFX.Client.Mvvm.View.Annotations.ContractAnnotationAttribute"/> class.
            </summary>
            <param name="fdt">The FDT.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Annotations.ContractAnnotationAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LogoFX.Client.Mvvm.View.Annotations.ContractAnnotationAttribute"/> class.
            </summary>
            <param name="fdt">The FDT.</param>
            <param name="forceFullStates">if set to <c>true</c> [force full states].</param>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Annotations.ContractAnnotationAttribute.FDT">
            <summary>
            </summary>
            <value>
            The FDT.
            </value>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Annotations.ContractAnnotationAttribute.ForceFullStates">
            <summary>
            Gets a value indicating whether [force full states].
            </summary>
            <value>
              <c>true</c> if [force full states]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Controls.IUpdateVisualState">
            <summary>
            The IUpdateVisualState interface is used to provide the
            InteractionHelper with access to the type's UpdateVisualState method.
            </summary>    
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.IUpdateVisualState.UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Controls.PopupPlacement">
            <summary>
            Popup placement options.
            </summary>
        </member>
        <member name="F:LogoFX.Client.Mvvm.View.Controls.PopupPlacement.Top">
            <summary>
            The top
            </summary>
        </member>
        <member name="F:LogoFX.Client.Mvvm.View.Controls.PopupPlacement.Bottom">
            <summary>
            The bottom
            </summary>
        </member>
        <member name="F:LogoFX.Client.Mvvm.View.Controls.PopupPlacement.Left">
            <summary>
            The left
            </summary>
        </member>
        <member name="F:LogoFX.Client.Mvvm.View.Controls.PopupPlacement.Right">
            <summary>
            The right
            </summary>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Localization.CultureInfoCollection">
            <summary>
            Represents a dynamic <see cref="T:System.Globalization.CultureInfo"/> collection that provides notifications when items get added, changed, removed,
            or when the whole list is refreshed.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Localization.CultureInfoCollection.#ctor">
            <summary>
            Initializes a new instance of the <c>CultureInfoCollection</c> class.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Localization.CultureInfoCollection.#ctor(System.Collections.Generic.IEnumerable{System.Globalization.CultureInfo})">
            <summary>
            Initializes a new instance of the <c>CultureInfoCollection</c> class that contains elements copied from the specified collection.
            </summary>
            <param name="items">The collection from which the elements are copied.</param>
            <exception cref="T:System.ArgumentNullException">
            The collection parameter cannot be null.
            </exception>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Utils.EnumHelper">
            <summary>
            Enables storing and querying the specified enumeration type.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Utils.EnumHelper.GetBoxed(System.Enum)">
            <summary>
            Gets the enum value.
            </summary>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Utils.EnumHelper.GetValues``1">
            <summary>
            Gets all values of the specified enum type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Type ' + enumType.Name + ' is not an enum</exception>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Utils.EnumHelper.GetValues(System.Type)">
            <summary>
            Gets all values of the specified enum type.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Type ' + enumType.Name + ' is not an enum</exception>
        </member>
    </members>
</doc>
