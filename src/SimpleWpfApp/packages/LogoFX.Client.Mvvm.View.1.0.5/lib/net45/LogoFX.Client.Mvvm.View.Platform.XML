<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LogoFX.Client.Mvvm.View.Platform</name>
    </assembly>
    <members>
        <member name="T:LogoFX.Client.Mvvm.View.Controls.HeaderedContentControl">
            <summary>
            Content control with custom header.
            </summary>
            <seealso cref="T:System.Windows.Controls.ContentControl" />
        </member>
        <member name="F:LogoFX.Client.Mvvm.View.Controls.HeaderedContentControl.HeaderProperty">
            <summary>
            The header property
            </summary>
        </member>
        <member name="F:LogoFX.Client.Mvvm.View.Controls.HeaderedContentControl.HeaderTemplateProperty">
            <summary>
            The header template property
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Controls.HeaderedContentControl.Header">
            <summary>
            Gets or sets the header.
            </summary>
            <value>
            The header.
            </value>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Controls.HeaderedContentControl.HeaderTemplate">
            <summary>
            Gets or sets the header template.
            </summary>
            <value>
            The header template.
            </value>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.HeaderedContentControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LogoFX.Client.Mvvm.View.Controls.HeaderedContentControl"/> class.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.HeaderedContentControl.OnHeaderChanged(System.Object,System.Object)">
            <summary>
            Called when header is changed.
            </summary>
            <param name="oldHeader">The old header.</param>
            <param name="newHeader">The new header.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.HeaderedContentControl.OnHeaderTemplateChanged(System.Windows.DataTemplate,System.Windows.DataTemplate)">
            <summary>
            Called when header template is changed.
            </summary>
            <param name="oldHeaderTemplate">The old header template.</param>
            <param name="newHeaderTemplate">The new header template.</param>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Controls.InteractionHelper">
            <summary>
            The InteractionHelper provides controls with support for all of the
            common interactions like mouse movement, mouse clicks, key presses,
            etc., and also incorporates proper event semantics when the control is
            disabled.
            </summary>
        </member>
        <member name="F:LogoFX.Client.Mvvm.View.Controls.InteractionHelper.SequentialClickThresholdInMilliseconds">
            <summary>
            The threshold used to determine whether two clicks are temporally
            local and considered a double click (or triple, quadruple, etc.).
            500 milliseconds is the default double click value on Windows.
            This value would ideally be pulled form the system settings.
            </summary>
        </member>
        <member name="F:LogoFX.Client.Mvvm.View.Controls.InteractionHelper.SequentialClickThresholdInPixelsSquared">
            <summary>
            The threshold used to determine whether two clicks are spatially
            local and considered a double click (or triple, quadruple, etc.)
            in pixels squared.  We use pixels squared so that we can compare to
            the distance delta without taking a square root.
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Controls.InteractionHelper.Control">
            <summary>
            Gets the control the InteractionHelper is targeting.
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Controls.InteractionHelper.IsFocused">
            <summary>
            Gets a value indicating whether the control has focus.
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Controls.InteractionHelper.IsMouseOver">
            <summary>
            Gets a value indicating whether the mouse is over the control.
            </summary> 
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Controls.InteractionHelper.IsReadOnly">
            <summary>
            Gets a value indicating whether the read-only property is set.
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Controls.InteractionHelper.IsPressed">
            <summary>
            Gets a value indicating whether the mouse button is pressed down
            over the control.
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Controls.InteractionHelper.LastClickTime">
            <summary>
            Gets or sets the last time the control was clicked.
            </summary>
            <remarks>
            The value is stored as Utc time because it is slightly more
            performant than converting to local time.
            </remarks>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Controls.InteractionHelper.LastClickPosition">
            <summary>
            Gets or sets the mouse position of the last click.
            </summary>
            <remarks>The value is relative to the control.</remarks>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Controls.InteractionHelper.ClickCount">
            <summary>
            Gets the number of times the control was clicked.
            </summary>
        </member>
        <member name="F:LogoFX.Client.Mvvm.View.Controls.InteractionHelper._updateVisualState">
            <summary>
            Reference used to call UpdateVisualState on the base class.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.InteractionHelper.#ctor(System.Windows.Controls.Control)">
            <summary>
            Initializes a new instance of the InteractionHelper class.
            </summary>
            <param name="control">Control receiving interaction.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.InteractionHelper.UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
            <remarks>
            UpdateVisualState works differently than the rest of the injected
            functionality.  Most of the other events are overridden by the
            calling class which calls Allow, does what it wants, and then calls
            Base.  UpdateVisualState is the opposite because a number of the
            methods in InteractionHelper need to trigger it in the calling
            class.  We do this using the IUpdateVisualState internal interface.
            </remarks>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.InteractionHelper.UpdateVisualStateBase(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.InteractionHelper.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the control's Loaded event.
            </summary>
            <param name="sender">The control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.InteractionHelper.OnIsEnabledChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handle changes to the control's IsEnabled property.
            </summary>
            <param name="sender">The control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.InteractionHelper.OnIsReadOnlyChanged(System.Boolean)">
            <summary>
            Handles changes to the control's IsReadOnly property.
            </summary>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.InteractionHelper.OnApplyTemplateBase">
            <summary>
            Update the visual state of the control when its template is changed.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.InteractionHelper.AllowGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Check if the control's GotFocus event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.InteractionHelper.OnGotFocusBase">
            <summary>
            Base implementation of the virtual GotFocus event handler.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.InteractionHelper.AllowLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Check if the control's LostFocus event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.InteractionHelper.OnLostFocusBase">
            <summary>
            Base implementation of the virtual LostFocus event handler.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.InteractionHelper.AllowMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Check if the control's MouseEnter event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.InteractionHelper.OnMouseEnterBase">
            <summary>
            Base implementation of the virtual MouseEnter event handler.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.InteractionHelper.AllowMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Check if the control's MouseLeave event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.InteractionHelper.OnMouseLeaveBase">
            <summary>
            Base implementation of the virtual MouseLeave event handler.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.InteractionHelper.AllowMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Check if the control's MouseLeftButtonDown event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.InteractionHelper.OnMouseLeftButtonDownBase">
            <summary>
            Base implementation of the virtual MouseLeftButtonDown event
            handler.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.InteractionHelper.AllowMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Check if the control's MouseLeftButtonUp event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.InteractionHelper.OnMouseLeftButtonUpBase">
            <summary>
            Base implementation of the virtual MouseLeftButtonUp event handler.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.InteractionHelper.AllowKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Check if the control's KeyDown event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.InteractionHelper.AllowKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Check if the control's KeyUp event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Controls.MatrixExtensions">
            <summary>
            This set of internal extension methods provide general solutions and 
            utilities in a small enough number to not warrant a dedicated extension
            methods class.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.MatrixExtensions.Invert(System.Windows.Media.Matrix,System.Windows.Media.Matrix@)">
            <summary>
            Inverts a Matrix. The Invert functionality on the Matrix type is 
            internal to the framework only. Since Matrix is a struct, an out 
            parameter must be presented.
            </summary>
            <param name="m">The Matrix object.</param>
            <param name="outputMatrix">The matrix to return by an output 
            parameter.</param>
            <returns>Returns a value indicating whether the type was 
            successfully inverted. If the determinant is 0.0, then it cannot 
            be inverted and the original instance will remain untouched.</returns>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Controls.PopupHeaderedContentControl">
            <summary>
            Content control with header which is displayed in popup.
            </summary>
            <seealso cref="T:LogoFX.Client.Mvvm.View.Controls.HeaderedContentControl" />
            <seealso cref="T:LogoFX.Client.Mvvm.View.Controls.IUpdateVisualState" />
        </member>
        <member name="E:LogoFX.Client.Mvvm.View.Controls.PopupHeaderedContentControl.DropDownOpening">
            <summary>
            Occurs when drop down is opening.
            </summary>
        </member>
        <member name="E:LogoFX.Client.Mvvm.View.Controls.PopupHeaderedContentControl.DropDownOpened">
            <summary>
            Occurs when drop down is opened.
            </summary>
        </member>
        <member name="E:LogoFX.Client.Mvvm.View.Controls.PopupHeaderedContentControl.DropDownClosing">
            <summary>
            Occurs when drop down is closing.
            </summary>
        </member>
        <member name="E:LogoFX.Client.Mvvm.View.Controls.PopupHeaderedContentControl.DropDownClosed">
            <summary>
            Occurs when drop down is closed.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.PopupHeaderedContentControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LogoFX.Client.Mvvm.View.Controls.PopupHeaderedContentControl"/> class.
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Controls.PopupHeaderedContentControl.PopupHorizontalOffset">
            <summary>
            Gets or sets the popup horizontal offset.
            </summary>
            <value>
            The popup horizontal offset.
            </value>
        </member>
        <member name="F:LogoFX.Client.Mvvm.View.Controls.PopupHeaderedContentControl.PopupHorizontalOffsetProperty">
            <summary>
            The popup horizontal offset property
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Controls.PopupHeaderedContentControl.PopupVerticalOffset">
            <summary>
            Gets or sets the popup vertical offset.
            </summary>
            <value>
            The popup vertical offset.
            </value>
        </member>
        <member name="F:LogoFX.Client.Mvvm.View.Controls.PopupHeaderedContentControl.PopupVerticalOffsetProperty">
            <summary>
            The popup vertical offset property
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Controls.PopupHeaderedContentControl.PopupPlacement">
            <summary>
            Gets or sets the popup placement.
            </summary>
            <value>
            The popup placement.
            </value>
        </member>
        <member name="F:LogoFX.Client.Mvvm.View.Controls.PopupHeaderedContentControl.PopupPlacementProperty">
            <summary>
            The popup placement property
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Controls.PopupHeaderedContentControl.IsPopupOpen">
            <summary>
            Gets or sets a value indicating whether this instance is popup open.
            </summary>
            <value>
            <c>true</c> if this instance is popup open; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:LogoFX.Client.Mvvm.View.Controls.PopupHeaderedContentControl.IsPopupOpenProperty">
            <summary>
            The is popup open property
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.PopupHeaderedContentControl.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.PopupHeaderedContentControl.OnDropDownOpening(LogoFX.Client.Mvvm.View.Controls.RoutedPropertyChangingEventArgs{System.Boolean})">
            <summary>
            Raises the <see cref="E:LogoFX.Client.Mvvm.View.Controls.PopupHeaderedContentControl.DropDownOpening" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Boolean"/> instance containing the event data.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.PopupHeaderedContentControl.OnDropDownOpened(System.Windows.RoutedPropertyChangedEventArgs{System.Boolean})">
            <summary>
            Raises the <see cref="E:LogoFX.Client.Mvvm.View.Controls.PopupHeaderedContentControl.DropDownOpened"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.PopupHeaderedContentControl.OnDropDownClosing(LogoFX.Client.Mvvm.View.Controls.RoutedPropertyChangingEventArgs{System.Boolean})">
            <summary>
            Raises the <see cref="E:LogoFX.Client.Mvvm.View.Controls.PopupHeaderedContentControl.DropDownClosing" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Boolean"/> instance containing the event data.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.PopupHeaderedContentControl.OnDropDownClosed(System.Windows.RoutedPropertyChangedEventArgs{System.Boolean})">
            <summary>
            Raises the <see cref="E:LogoFX.Client.Mvvm.View.Controls.PopupHeaderedContentControl.DropDownClosed" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Boolean"/> instance containing the event data.</param>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Controls.PopupHelper">
            <summary>
            PopupHelper is a simple wrapper type that helps abstract platform
            differences out of the Popup.
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Controls.PopupHelper.UsesClosingVisualState">
            <summary>
            Gets a value indicating whether a visual popup state is being used
            in the current template for the Closed state. Setting this value to
            true will delay the actual setting of Popup.IsOpen to false until
            after the visual state's transition for Closed is complete.
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Controls.PopupHelper.Parent">
            <summary>
            Gets or sets the parent control.
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Controls.PopupHelper.MaxDropDownHeight">
            <summary>
            Gets or sets the maximum drop down height value.
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Controls.PopupHelper.Popup">
            <summary>
            Gets the Popup control instance.
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Controls.PopupHelper.IsOpen">
            <summary>
            Gets or sets a value indicating whether the actual Popup is open.
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Controls.PopupHelper.PopupChild">
            <summary>
            Gets or sets the popup child framework element. Can be used if an
            assumption is made on the child type.
            </summary>
        </member>
        <member name="E:LogoFX.Client.Mvvm.View.Controls.PopupHelper.Closed">
            <summary>
            The Closed event is fired after the Popup closes.
            </summary>
        </member>
        <member name="E:LogoFX.Client.Mvvm.View.Controls.PopupHelper.FocusChanged">
            <summary>
            Fired when the popup children have a focus event change, allows the
            parent control to update visual states or react to the focus state.
            </summary>
        </member>
        <member name="E:LogoFX.Client.Mvvm.View.Controls.PopupHelper.UpdateVisualStates">
            <summary>
            Fired when the popup children intercept an event that may indicate
            the need for a visual state update by the parent control.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.PopupHelper.#ctor(System.Windows.Controls.Control)">
            <summary>
            Initializes a new instance of the PopupHelper class.
            </summary>
            <param name="parent">The parent control.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.PopupHelper.#ctor(System.Windows.Controls.Control,System.Windows.Controls.Primitives.Popup)">
            <summary>
            Initializes a new instance of the PopupHelper class.
            </summary>
            <param name="parent">The parent control.</param>
            <param name="popup">The Popup template part.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.PopupHelper.Arrange">
            <summary>
            Arrange the popup.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.PopupHelper.OnClosed(System.EventArgs)">
            <summary>
            Fires the Closed event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.PopupHelper.OnPopupClosedStateChanged(System.Object,System.Windows.VisualStateChangedEventArgs)">
            <summary>
            Actually closes the popup after the VSM state animation completes.
            </summary>
            <param name="sender">Event source.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.PopupHelper.BeforeOnApplyTemplate">
            <summary>
            Should be called by the parent control before the base
            OnApplyTemplate method is called.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.PopupHelper.AfterOnApplyTemplate">
            <summary>
            Should be called by the parent control after the base
            OnApplyTemplate method is called.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.PopupHelper.PopupChild_SizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            The size of the popup child has changed.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.PopupHelper.OutsidePopup_MouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The mouse has clicked outside of the popup.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.PopupHelper.Popup_Closed(System.Object,System.EventArgs)">
            <summary>
            Connected to the Popup Closed event and fires the Closed event.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.PopupHelper.OnFocusChanged(System.EventArgs)">
            <summary>
            Connected to several events that indicate that the FocusChanged 
            event should bubble up to the parent control.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.PopupHelper.OnUpdateVisualStates(System.EventArgs)">
            <summary>
            Fires the UpdateVisualStates event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.PopupHelper.PopupChild_GotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The popup child has received focus.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.PopupHelper.PopupChild_LostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The popup child has lost focus.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.PopupHelper.PopupChild_MouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            The popup child has had the mouse enter its bounds.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.PopupHelper.PopupChild_MouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            The mouse has left the popup child's bounds.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Controls.RoutedPropertyChangingEventHandler`1">
            <summary>
            Represents a function which conveys information about property change.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:LogoFX.Client.Mvvm.View.Controls.RoutedPropertyChangingEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Controls.RoutedPropertyChangingEventArgs`1">
            <summary>
            Event arguments for property change.
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.Windows.RoutedEventArgs" />
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Controls.RoutedPropertyChangingEventArgs`1.Property">
            <summary>
            Gets the property.
            </summary>
            <value>
            The property.
            </value>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Controls.RoutedPropertyChangingEventArgs`1.OldValue">
            <summary>
            Gets the old value.
            </summary>
            <value>
            The old value.
            </value>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Controls.RoutedPropertyChangingEventArgs`1.NewValue">
            <summary>
            Gets or sets the new value.
            </summary>
            <value>
            The new value.
            </value>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Controls.RoutedPropertyChangingEventArgs`1.IsCancelable">
            <summary>
            Gets a value indicating whether this instance is cancelable.
            </summary>
            <value>
            <c>true</c> if this instance is cancelable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Controls.RoutedPropertyChangingEventArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:LogoFX.Client.Mvvm.View.Controls.RoutedPropertyChangingEventArgs`1"/> is cancel.
            </summary>
            <value>
              <c>true</c> if cancel; otherwise, <c>false</c>.
            </value>
            <exception cref="T:System.InvalidOperationException">invalid cancel</exception>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Controls.RoutedPropertyChangingEventArgs`1.InCoercion">
            <summary>
            Gets or sets a value indicating whether in coercion.
            </summary>
            <value>
              <c>true</c> if in coercion; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.RoutedPropertyChangingEventArgs`1.#ctor(System.Windows.DependencyProperty,`0,`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LogoFX.Client.Mvvm.View.Controls.RoutedPropertyChangingEventArgs`1"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <param name="isCancelable">if set to <c>true</c> [is cancelable].</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Controls.RoutedPropertyChangingEventArgs`1.#ctor(System.Windows.DependencyProperty,`0,`0,System.Boolean,System.Windows.RoutedEvent)">
            <summary>
            Initializes a new instance of the <see cref="T:LogoFX.Client.Mvvm.View.Controls.RoutedPropertyChangingEventArgs`1"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <param name="isCancelable">if set to <c>true</c> [is cancelable].</param>
            <param name="routedEvent">The routed event.</param>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Converters.AddConstantConverter">
            <summary>
            Adds two specified values.
            </summary>
            <seealso cref="T:System.Windows.Data.IValueConverter" />
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.AddConstantConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.AddConstantConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Converters.AddConverter">
            <summary>
            Calculates sum of collection of values.
            </summary>
            <seealso cref="T:System.Windows.Data.IMultiValueConverter" />
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.AddConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target.
            </summary>
            <param name="values">The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding" /> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> indicates that the source binding has no value to provide for conversion.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value.If the method returns null, the valid null value is used.A return value of <see cref="T:System.Windows.DependencyProperty" />.<see cref="F:System.Windows.DependencyProperty.UnsetValue" /> indicates that the converter did not produce a value, and that the binding will use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue" /> if it is available, or else will use the default value.A return value of <see cref="T:System.Windows.Data.Binding" />.<see cref="F:System.Windows.Data.Binding.DoNothing" /> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue" /> or the default value.
            </returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.AddConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a binding target value to the source binding values.
            </summary>
            <param name="value">The value that the binding target produces.</param>
            <param name="targetTypes">The array of types to convert to. The array length indicates the number and types of values that are suggested for the method to return.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            An array of values that have been converted from the target value back to the source values.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Converters.BoolRevertConverter">
            <summary>
            Returns the inverted value of the provided <see cref="T:System.Boolean"/> parameter.
            </summary>
            <seealso cref="T:System.Windows.Data.IValueConverter" />
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.BoolRevertConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.BoolRevertConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Converters.BoolToConstConverter">
            <summary>
            Converts boolean to constant value
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.BoolToConstConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.BoolToConstConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Converters.BoolToVisibilityConverter">
            <summary>
            Converts the provided boolean value to the correspondent <see cref="T:System.Windows.Visibility"/> one.
            </summary>
            <seealso cref="T:System.Windows.Data.IValueConverter" />
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.BoolToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.BoolToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.Exception">The method or operation is not implemented.</exception>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Converters.CultureDateTimeConverter">
            <summary>
            Converts the provided <see cref="T:System.DateTime"/> value to the correspondent string.
            </summary>
            <seealso cref="T:System.Windows.Data.IValueConverter" />
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.CultureDateTimeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.CultureDateTimeConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Converters.DebugConverter">
            <summary>
            Provides a way to apply custom logic to a binding.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.DebugConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.DebugConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value back.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Converters.DurationConverter">
            <summary>
            Provides a way to apply duration formating to a binding.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.DurationConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.DurationConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value back.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Converters.ElementToItemConverter">
            <summary>
            Intended to map ItemsControl's item to some other item inside converters Items list
            Usecase: providing distinct brush per item index
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Converters.ElementToItemConverter.Items">
            <summary>
            Gets the items.
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Converters.ElementToItemConverter.Default">
            <summary>
            Gets or sets the default.
            </summary>
            <value>
            The default.
            </value>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.ElementToItemConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.ElementToItemConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Converters.EnumConverter">
            <summary>
            Provides a way to fix weird behavior of selectors in Silverlight
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.EnumConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.EnumConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Converters.EnumSourceConverter">
            <summary>
            Provides collection of <see cref="T:System.Enum"/> values based on one value
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.EnumSourceConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.EnumSourceConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Converters.EnumDescriptionConverter">
            <summary>
            Extracts the description attribute.
            </summary>
            <seealso cref="T:System.Windows.Data.IValueConverter" />
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.EnumDescriptionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.EnumDescriptionConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Converters.EqualsToBooleanConverter">
            <summary>
            Compares between the provided value and parameter and returns the comparison result.
            </summary>
            <seealso cref="T:System.Windows.Data.IValueConverter" />
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.EqualsToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.EqualsToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Converters.EqualsToVisibilityConverter">
            <summary>
            Compares the specified value with the parameter and converts the result into <see cref="T:System.Windows.Visibility"/>
            </summary>
            <seealso cref="T:System.Windows.Data.IValueConverter" />
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.EqualsToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.EqualsToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Converters.ObjectToImageConverter">
            <summary>
            Retrieves image by its name
            </summary>
            <seealso cref="T:System.Windows.Data.IValueConverter" />
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Converters.ObjectToImageConverter.Suffix">
            <summary>
            Gets or sets the suffix.
            </summary>
            <value>
            The suffix.
            </value>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Converters.ObjectToImageConverter.Extension">
            <summary>
            Gets or sets the extension.
            </summary>
            <value>
            The extension.
            </value>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Converters.ObjectToImageConverter.Folder">
            <summary>
            Gets or sets the folder.
            </summary>
            <value>
            The folder.
            </value>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Converters.ObjectToImageConverter.Default">
            <summary>
            Gets or sets the default.
            </summary>
            <value>
            The default.
            </value>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.ObjectToImageConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.ObjectToImageConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.Exception">The method or operation is not implemented.</exception>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Converters.IntervalConverter">
            <summary>
            Provides a way to apply interval formating to a binding.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.IntervalConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.IntervalConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value back.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Converters.IsSetToVisibilityConverter">
            <summary>
            Sets visibility according to not null
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.IsSetToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.IsSetToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Converters.ItemToContextConverter">
            <summary>
            Conditionally extracts <see cref="P:System.Windows.FrameworkElement.DataContext"/> from value.
            </summary>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Converters.MinDateToTextConverter">
            <summary>
            Converts minimal value of <see cref="T:System.DateTime"/> to text.
            </summary>
            <seealso cref="T:System.Windows.Data.IValueConverter" />
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.MinDateToTextConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.MinDateToTextConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param><param name="targetType">The type to convert to.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Converters.NegativeConverter">
            <summary>
            Negates value
            </summary>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Converters.NotNullConverter">
            <summary>
            Converts reference value to boolean.
            </summary>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Converters.PercentageFormatConverter">
            <summary>
            Provides a way to apply custom formating to a binding value multiplied by 100.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.PercentageFormatConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.PercentageFormatConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay"/> bindings.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Converters.SupressTwoWayConverter">
            <summary>
            Supplies OneWayToSource binding mode in Silverlight
            </summary>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Converters.TextFormatConverter">
            <summary>
            Provides a way to apply custom formating to a binding value.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.TextFormatConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Converters.TextFormatConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value back.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Converters.TimeToDoubleConverter">
            <summary>
            Converts <see cref="T:System.DateTime"/> to <see cref="T:System.Double"/> according to supplied format
            </summary>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Interactivity.Behaviors.SelectTextOnFocusBehavior">
            <summary>
            Selects text on focus
            </summary>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Interactivity.Behaviors.UpdateSourceOnChangeBehavior">
            <summary>
            Provides functionality missed in Silverlight :
            {Binding UpdateSourceTrigger=PropertyChange}    
            </summary>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Localization.AssemblyLoaderService">
            <summary>
            Enables loading assemblies collection.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Localization.AssemblyLoaderService.GenerateLocalAssemblyCollection(System.String)">
            <summary>
            Generates the local assembly collection from the provided assembly name.
            </summary>
            <param name="baseAssemblyFullName">Full name of the base assembly.</param>
            <returns></returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Localization.AssemblyLoaderService.StartLoadResourceSets(System.Reflection.AssemblyName,LogoFX.Client.Mvvm.View.Localization.LoadResourceSetsHandler)">
            <summary>
            Starts loading resource sets asynchronously.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Localization.AssemblyResourceHelperBase">
            <summary>
            Provides services of loading assemblies into an app domain.
            </summary>
            <seealso cref="T:System.MarshalByRefObject" />
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Localization.AssemblyResourceHelperBase.CreateInNewDomainInternal``1(System.Object[])">
            <summary>
            Creates a new instance of the specified type in a new app domain.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="args">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Localization.AssemblyResourceHelperBase.DestroyDomain(LogoFX.Client.Mvvm.View.Localization.AssemblyResourceHelperBase)">
            <summary>
            Destroys the domain.
            </summary>
            <param name="assemblyResourceLoader">The assembly resource loader.</param>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Localization.AssemblySaverService">
            <summary>
            Enables saving colletion of assemblies for future retrieval.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Localization.AssemblySaverService.Save(LogoFX.Client.Mvvm.View.Localization.LocalAssemblyCollection)">
            <summary>
            Saves the specified local assembly collection.
            </summary>
            <param name="localAssemblyCollection">The local assembly collection.</param>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Localization.AssemblySaverService.Instance">
            <summary>
            Gets the instance of <see cref="T:LogoFX.Client.Mvvm.View.Localization.AssemblySaverService"/>.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="F:LogoFX.Client.Mvvm.View.Localization.LocalizationManager.GetAssemblyNames">
            <summary>
            AssemblyNames accessor
            </summary>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Localization.ResourceCollection">
            <summary>
            Resources dictionary
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Localization.ResourceCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LogoFX.Client.Mvvm.View.Localization.ResourceCollection"/> class.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Localization.ResourceCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:LogoFX.Client.Mvvm.View.Localization.ResourceCollection"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Localization.ResourceSetCollection">
            <summary>
            Resources set collection
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Localization.ResourceSetCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LogoFX.Client.Mvvm.View.Localization.ResourceSetCollection"/> class.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Localization.ResourceSetCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:LogoFX.Client.Mvvm.View.Localization.ResourceSetCollection"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.MarkupExtensions.LocalizedStringExtension.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LogoFX.Client.Mvvm.View.MarkupExtensions.LocalizedStringExtension"/> class.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.MarkupExtensions.LocalizedStringExtension.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LogoFX.Client.Mvvm.View.MarkupExtensions.LocalizedStringExtension"/> class.
            </summary>
            <param name="key">The localized value will be found by this parameter.</param>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.MarkupExtensions.LocalizedStringExtension.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LogoFX.Client.Mvvm.View.MarkupExtensions.LocalizedStringExtension"/> class.
            </summary>
            <param name="key">The localized value will be found by this parameter.</param>
            <param name="fallback">The value that will be returned if the localization value not found.</param>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.MarkupExtensions.LocalizedStringExtension.Key">
            <summary>
            Gets or sets the Key property. 
            </summary>
            <value></value>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.MarkupExtensions.LocalizedStringExtension.Fallback">
            <summary>
            Gets or sets a fallback string. 
            </summary>
            The <c>string</c> represents a key of the string resource. The fallback string is 
            used when a resource is not found.
            <value></value>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.MarkupExtensions.LocalizedStringExtension.ProvideValueInternal(System.IServiceProvider)">
            <summary>
            Provides the localization value by key specified in constructor.
            </summary>
            <param name="serviceProvider">This parameter is not used.</param>
            <returns>Localized value by key specified in constructor or fallback value. </returns>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Util.TreeHelper">
            <summary>
            Logical and Visua tree helper.
            </summary>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Util.TreeHelper.GetVisualDescendant``1(System.Windows.DependencyObject)">
            <summary>
            Gets the visual descendant of the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Util.TreeHelper.GetVisualDescendants``1(System.Windows.DependencyObject)">
            <summary>
            Gets the visual descendants of the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Util.TreeHelper.FindVisualAncestor``1(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Finds the visual ancestor of the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The object.</param>
            <param name="includeThis">if set to <c>true</c> [include this].</param>
            <returns></returns>
        </member>
        <member name="M:LogoFX.Client.Mvvm.View.Util.TreeHelper.FindLogicalAncestor``1(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Finds the logical ancestor of the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The object.</param>
            <param name="includeThis">if set to <c>true</c> [include this].</param>
            <returns></returns>
        </member>
        <member name="T:LogoFX.Client.Mvvm.View.Xaml.SharedResourceDictionary">
            <summary>
            The shared resource dictionary is a specialized resource dictionary
            that loads it content only once. If a second instance with the same source
            is created, it only merges the resources from the cache.
            </summary>
        </member>
        <member name="F:LogoFX.Client.Mvvm.View.Xaml.SharedResourceDictionary.s_sharedDictionaries">
            <summary>
            Internal cache of loaded dictionaries 
            </summary>
        </member>
        <member name="F:LogoFX.Client.Mvvm.View.Xaml.SharedResourceDictionary._sourceUri">
            <summary>
            Local member of the source uri
            </summary>
        </member>
        <member name="P:LogoFX.Client.Mvvm.View.Xaml.SharedResourceDictionary.Source">
            <summary>
            Gets or sets the uniform resource identifier (URI) to load resources from.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.InteractivityTemplate">
            <summary>
            <see cref="T:System.Windows.FrameworkTemplate"/> for InteractivityElements instance
            <remarks>can't use <see cref="T:System.Windows.FrameworkTemplate"/> directly due to some internal abstract member</remarks>
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.InteractivityItems">
            <summary>
            Holder for interactivity entries
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.InteractivityItems.Triggers">
            <summary>
            Storage for triggers
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.InteractivityItems.Behaviors">
            <summary>
            Storage for Behaviors
            </summary>
        </member>
    </members>
</doc>
